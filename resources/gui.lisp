(defvar gui-keypressed-w)
(defvar gui-keypressed-a)
(defvar gui-keypressed-s)
(defvar gui-keypressed-d)
(defvar gui-keypressed-up)
(defvar gui-keypressed-down)
(defvar gui-keypressed-left)
(defvar gui-keypressed-right)
(defvar gui-keypressed-shiftl)
(defvar gui-keypressed-shiftr)

(defvar gui-motion-speed)
(defvar gui-motion-speed-reverse)

(defun gui-init ()
  '())
(defun game-entity-setvel (ent x y)
  (game-entity-setattr ent "xdir" x)
  (game-entity-setattr ent "ydir" y))
(defun game-entity-addvel (ent x y)
  (game-entity-setattr ent "xdir" (+ x (game-entity-getattr ent "xdir")))
  (game-entity-setattr ent "ydir" (+ y (game-entity-getattr ent "ydir"))))
(defun game-entity-fire-projectile (ent)
  (if (or (!= (game-entity-getattr ent "xdir") 0)
	  (!= (game-entity-getattr ent "ydir") 0))
      (let ((new (game-entity-summon)))
	(game-entity-setattr new "x" (game-entity-getattr ent "x"))
	(game-entity-setattr new "y" (game-entity-getattr ent "y"))
	(game-entity-setattr new "xdir" (* 2 (game-entity-getattr ent "xdir")))
	(game-entity-setattr new "ydir" (* 2 (game-entity-getattr ent "ydir")))
	(game-entity-setattr new "color" (game-entity-getattr ent "color"))
	(game-entity-setattr new "team" (game-entity-getattr ent "team"))
	(game-entity-setattr new "type" "bullet")
	(game-entity-setattr new "health" 1)
	(game-entity-setattr new "damage" 1)
	(game-entity-setattr new "mass" 20)
	(game-entity-setattr new "size" 20)
	(game-entity-setattr new "creator" ent))))
(defun gui-modify-vel (ent)
  (if (string-equals (game-entity-getattr ent "control") "player1")
      (progn
	(if gui-keypressed-w (game-entity-addvel ent 0 -7))
	(if gui-keypressed-s (game-entity-addvel ent 0 7))
	(if gui-keypressed-a (game-entity-addvel ent -7 0))
	(if gui-keypressed-d (game-entity-addvel ent 7 0))
	(if gui-keypressed-shiftl (game-entity-fire-projectile ent))))
  (if (string-equals (game-entity-getattr ent "control") "player2")
      (progn
	(if gui-keypressed-up (game-entity-addvel ent 0 -7))
	(if gui-keypressed-down (game-entity-addvel ent 0 7))
	(if gui-keypressed-left (game-entity-addvel ent -7 0))
	(if gui-keypressed-right (game-entity-addvel ent 7 0))
	(if gui-keypressed-shiftr (game-entity-fire-projectile ent))))
  (if (string-equals (game-entity-getattr ent "control") "reverse1")
      (progn
	(if gui-keypressed-up (game-entity-setattr ent "ydir" 7))
	(if gui-keypressed-down (game-entity-setattr ent "ydir" -7))
	(if gui-keypressed-left (game-entity-setattr ent "xdir" 7))
	(if gui-keypressed-right (game-entity-setattr ent "xdir" -7))))
  (if (string-equals (game-entity-getattr ent "control") "reverse2")
      (progn
	(if gui-keypressed-up (game-entity-setattr ent "ydir" 7))
	(if gui-keypressed-down (game-entity-setattr ent "ydir" -7))
	(if gui-keypressed-left (game-entity-setattr ent "xdir" 7))
	(if gui-keypressed-right (game-entity-setattr ent "xdir" -7))))
  (if (string-equals (game-entity-getattr ent "control") "fly")
      (progn
	(game-entity-addvel ent (rand-select '(-7 7))
			    (rand-select '(-7 7)))))
  (if (string-equals (game-entity-getattr ent "control") "jitter")
      (progn
	(game-entity-setattr ent "xdir" (rand-select '(-7 0 7)))
	(game-entity-setattr ent "ydir" (rand-select '(-7 0 7)))))
  (if (game-entity-getattr ent "target")
      (let ((target (game-entity-getattr ent "target"))
	    (dx (- (game-entity-getattr target "x")
		   (game-entity-getattr ent "x")))
	    (dy (- (game-entity-getattr target "y")
		   (game-entity-getattr ent "y")))
	    (mass (game-entity-getattr ent "mass")))
	(if (and dx dy)
	    (game-entity-addvel ent (/ dx mass) (/ dy mass)))))
  (if (string-equals (game-entity-getattr ent "firing") "rapid")
      (game-entity-fire-projectile ent))
  (if (string-equals (game-entity-getattr ent "firing") "slow")
      (if (== (% (get-time) 2) 0)
	  (game-entity-fire-projectile ent))))
(defun gui-keypress (key)
  (if (string-equals key "Up") (setq gui-keypressed-up 't))
  (if (string-equals key "Down") (setq gui-keypressed-down 't))
  (if (string-equals key "Left") (setq gui-keypressed-left 't))
  (if (string-equals key "Right") (setq gui-keypressed-right 't))
  (if (string-equals key "w") (setq gui-keypressed-w 't))
  (if (string-equals key "a") (setq gui-keypressed-a 't))
  (if (string-equals key "s") (setq gui-keypressed-s 't))
  (if (string-equals key "d") (setq gui-keypressed-d 't))
  (if (string-equals key "Shift_L") (setq gui-keypressed-shiftl 't))
  (if (string-equals key "Shift_R") (setq gui-keypressed-shiftr 't)))

(defun gui-keyrelease (key)
  (if (string-equals key "Up") (setq gui-keypressed-up '()))
  (if (string-equals key "Down") (setq gui-keypressed-down '()))
  (if (string-equals key "Left") (setq gui-keypressed-left '()))
  (if (string-equals key "Right") (setq gui-keypressed-right '()))
  (if (string-equals key "w") (setq gui-keypressed-w '()))
  (if (string-equals key "a") (setq gui-keypressed-a '()))
  (if (string-equals key "s") (setq gui-keypressed-s '()))
  (if (string-equals key "d") (setq gui-keypressed-d '()))
  (if (string-equals key "Shift_L") (setq gui-keypressed-shiftl '()))
  (if (string-equals key "Shift_R") (setq gui-keypressed-shiftr '())))
